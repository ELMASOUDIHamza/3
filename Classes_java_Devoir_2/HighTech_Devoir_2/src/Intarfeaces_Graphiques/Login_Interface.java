/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Intarfeaces_Graphiques;

import Class_Created.Patient;
import Class_Created.User;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author hamza
 */
public class Login_Interface extends javax.swing.JFrame {
      PreparedStatement ps1, ps2, ps3,ps4;
    ResultSet rs1, rs2, rs3, rs4;
    ArrayList<String> date_rdv = new ArrayList<>();
    ArrayList<String> date_rdv2 = new ArrayList<>();
    ArrayList<String> date_rdv3 = new ArrayList<>();
    ArrayList<String> date_rdv4 = new ArrayList<>();
    int i=0, k=0, l=0;
    String date, date2, date3, date4;
//static String nc;
  //static Patient patient_logged ;
       static Connection cnx;
     static ResultSet rs_patient;
     String patient_national_code;
     String employment_code_d, employment_code_r;
     
    public Login_Interface() {
        initComponents();
        

    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label_login = new javax.swing.JLabel();
        txtLogin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnCon = new javax.swing.JButton();
        btnAnn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtPW = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));

        label_login.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        label_login.setText("Login");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Password");

        btnCon.setText("Connexion");
        btnCon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConActionPerformed(evt);
            }
        });

        btnAnn.setText("Annuler");
        btnAnn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("Forgot password ?");

        txtPW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPWActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(btnAnn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(label_login, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(290, 290, 290))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCon)
                                    .addComponent(jLabel4))
                                .addGap(117, 117, 117))
                            .addComponent(txtPW))))
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_login)
                    .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCon)
                    .addComponent(btnAnn))
                .addContainerGap(240, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(208, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConActionPerformed

//--------------------------------------------------------------------------------------------------------     
 // Se connecter à MYSQL :
    // 1) Ajout de la librairie java_mysql_connector :
    // 2) Création d'objet de la classe Connextion :

    // 3) Création d'objet de la classe PrepareStatement :
    PreparedStatement ps;
    // 4) Création d'objet de la classe ResultSet :
    ResultSet rs;
    
    // 5) Liaison entre MYSQL et l'application Java:
    try{
    cnx = DriverManager.getConnection("jdbc:mysql://localhost:3306/java_hightech_devoir_2","hightech","HIGHTECH2022");
        System.out.println("Base de données connecter");
////////////////////////////////////////////////////////////////////////////////////////
    PreparedStatement ps_patient = cnx.prepareStatement("select * from user where email = ? and password = ? and type= ?");
    ps_patient.setString(1,txtLogin.getText());
    ps_patient.setString(2,txtPW.getText());
    ps_patient.setString(3,"Patient");
  rs_patient = ps_patient.executeQuery();



         
    Espace_Patient espace_patient = new Espace_Patient();
    Espace_Doctor espace_doctor = new Espace_Doctor();
    Espace_Receptionist espace_receptionist = new Espace_Receptionist();
    Espace_Lab_Assistant espace_lab_assistant = new Espace_Lab_Assistant();
    Espace_Pharmacist espace_pharmacist = new Espace_Pharmacist();
    Espace_Admin espace_admin = new Espace_Admin();    
    int compteur_patient = 0;
    while(rs_patient.next()){
        compteur_patient++ ;
        patient_national_code = rs_patient.getString("national_code");
    }
     //   ResultSetMetaData rsmd = rs_patient.getMetaData();
       // rsmd.get
 //label_login.setText(rs_patient.getString(1).);
  //     espace_patient.label_patient_national_code.setText(rs_patient.getString(1));
    
    // Patient   ptest = new Patient(rs_patient.getString("national_code"), rs_patient.getString("first_name"),rs_patient.getString("last_name"));
     
    /*if(compteur_patient==1){
            //patient_logged = new Patient(rs_patient.getString("national_code"), rs_patient.getString("first_name"), rs_patient.getString("last_name"));
        }*/
////////////////////////////////////////////////////////////////////////////////    
    PreparedStatement ps_doctor = cnx.prepareStatement("select * from user u, doctor d where u.email = ? and u.password = ? and u.type= ? and u.national_code=d.national_code");
    ps_doctor.setString(1,txtLogin.getText());
    ps_doctor.setString(2,txtPW.getText());
    ps_doctor.setString(3,"doctor");
    ResultSet rs_doctor = ps_doctor.executeQuery();
    
    int compteur_doctor = 0;
    while(rs_doctor.next()){
        compteur_doctor++ ;
        employment_code_d = rs_doctor.getString("employment_code");
        }
////////////////////////////////////////////////////////////////////////////////    
    PreparedStatement ps_receptionist = cnx.prepareStatement("select * from user u, receptionist r where u.email = ? and u.password = ? and u.type= ? and u.national_code=r.national_code");
    ps_receptionist.setString(1,txtLogin.getText());
    ps_receptionist.setString(2,txtPW.getText());
    ps_receptionist.setString(3,"receptionist");
    ResultSet rs_receptionist = ps_receptionist.executeQuery();
    
    int compteur_receptionist = 0;
    while(rs_receptionist.next()){
        compteur_receptionist++ ;
        
        employment_code_r = rs_receptionist.getString("employment_code");
        }
////////////////////////////////////////////////////////////////////////////////    
    PreparedStatement ps_pharmacist = cnx.prepareStatement("select * from user where email = ? and password = ? and type= ?");
    ps_pharmacist.setString(1,txtLogin.getText());
    ps_pharmacist.setString(2,txtPW.getText());
    ps_pharmacist.setString(3,"pharmacist");
    ResultSet rs_pharmacist = ps_pharmacist.executeQuery();
    
    int compteur_pharmacist = 0;
    while(rs_pharmacist.next()){
        compteur_pharmacist++ ;
        }
////////////////////////////////////////////////////////////////////////////////    
    PreparedStatement ps_lab_assistant = cnx.prepareStatement("select * from user where email = ? and password = ? and type= ?");
    ps_lab_assistant.setString(1,txtLogin.getText());
    ps_lab_assistant.setString(2,txtPW.getText());
    ps_lab_assistant.setString(3,"lab assistant");
    ResultSet rs_lab_assistant = ps_lab_assistant.executeQuery();
    
    int compteur_lab_assistant = 0;
    while(rs_lab_assistant.next()){
        compteur_lab_assistant++ ;
        }
////////////////////////////////////////////////////////////////////////////////    
    PreparedStatement ps_admin = cnx.prepareStatement("select * from user where email = ? and password = ? and type= ?");
    ps_admin.setString(1,txtLogin.getText());
    ps_admin.setString(2,txtPW.getText());
    ps_admin.setString(3,"admin");
    ResultSet rs_admin = ps_admin.executeQuery();

    int compteur_admin = 0;
    while(rs_admin.next()){
        compteur_admin++ ;
        }
////////////////////////////////////////////////////////////////////////////////   
    
    if(compteur_patient ==1){
        
//String         nc = rs_patient.getString("national_code");

         espace_patient.label_patient_national_code.setText(patient_national_code);
        JOptionPane.showMessageDialog(this, "Patient login succesful !");
        this.setVisible(false);
        //espace_patient.getContentPane().add(new Login_Interface(nc));
         espace_patient.setVisible(true);
    //  espace_patient.label_patient_national_code
         
    }
    else if(compteur_doctor==1){
        espace_doctor.label_doctor_ec.setText(employment_code_d);
        
        try {
            
            ps1 = cnx.prepareStatement("select * from rdv where employment_code=? and valide is null");
            ps1.setString(1, employment_code_d);
            rs1 = ps1.executeQuery();
            while(rs1.next()){
                
                date = rs1.getString("date");
                date_rdv.add(date);
                
                System.out.println("Date 1 : "+date_rdv.get(i));
            espace_doctor.cb_doctor_valider_rdv.addItem(date_rdv.get(i));
            i++;
            }
 ////////////////////////////////////////////////////////////////////////////////           
            ps2 = cnx.prepareStatement("select * from rdv where employment_code=? and valide = true");
            ps2.setString(1, employment_code_d);
            rs2 = ps2.executeQuery();
            i=0;
            while(rs2.next()){
                
                date2 = rs2.getString("date");
                date_rdv2.add(date2);
                
                System.out.println("Date 1 : "+date_rdv2.get(i));
            espace_doctor.cb_doctor_rdvValide.addItem(date_rdv2.get(i));
            i++;
            }
 ////////////////////////////////////////////////////////////////////////////////           
        } 
        catch (SQLException ex) {
            Logger.getLogger(Espace_Doctor.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erreur pour docteur !");
        }
        
        JOptionPane.showMessageDialog(this, "Doctor login succesful !");
         this.setVisible(false);
         espace_doctor.setVisible(true);
    }
    else if(compteur_receptionist==1){
////////////////////////////////////////////////////////////////////////////////////        
        espace_receptionist.label_receptionist_ec.setText(employment_code_r);
           try {
            
                    ps3 = cnx.prepareStatement("select * from rdv where payer = ? or payer is null");
                    ps3.setBoolean(1, false);

                    rs3 = ps3.executeQuery();
                    int m= 0;
                while(rs3.next()){             
                    m++ ;
                    if(m !=0){
                        date3 = rs3.getString("date");
                        date_rdv3.add(date3);   

                        espace_receptionist.cb_receptionist_regler_fact.addItem(date_rdv3.get(k));
                        k++;
                    }    
                }
 ////////////////////////////////////////////////////////////////////////////////           
                    ps4 = cnx.prepareStatement("select * from rdv where payer = ?");
                    ps4.setBoolean(1, true);
                    rs4 = ps4.executeQuery();
                    int j=0;
                while(rs4.next()){
                    j++;
                    if(j !=0){
                        date4 = rs4.getString("date");
                        date_rdv4.add(date4);

                        System.out.println("Date 1 : "+date_rdv4.get(l));
                        espace_receptionist.cb_receptionist_fact_payee.addItem(date_rdv4.get(l));
                        l++;
                    }

                }
 ////////////////////////////////////////////////////////////////////////////////           
        } 
        catch (SQLException ex) {
            Logger.getLogger(Espace_Doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
 ///////////////////////////////////////////////////////////////////////////////////////////       
        JOptionPane.showMessageDialog(this, "Receptionist login succesful !");
        this.setVisible(false);
         espace_receptionist.setVisible(true);
    }
    else if(compteur_pharmacist==1){
        JOptionPane.showMessageDialog(this, "Pharmacist login succesful !");
        this.setVisible(false);
         espace_pharmacist.setVisible(true);
    }
    else if(compteur_lab_assistant==1){
        JOptionPane.showMessageDialog(this, "Lab Assistant login succesful !");
        this.setVisible(false);
         espace_lab_assistant.setVisible(true);
    }
    else if(compteur_admin==1){
        JOptionPane.showMessageDialog(this, "Admin login succesful !");
        this.setVisible(false);
         espace_admin.setVisible(true);
    }
    
    else JOptionPane.showMessageDialog(this, "Introuvable !");
    
    } 
    catch (SQLException ex) {
            Logger.getLogger(Login_Interface.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erreur !");
        }

    }//GEN-LAST:event_btnConActionPerformed

    public Login_Interface(String string) throws HeadlessException {
        super(string);
/*public String get_national_code(){
    
        try {
            nc = rs_patient.getString("national_code");
        } catch (SQLException ex) {
            Logger.getLogger(Login_Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        return nc;
}*/
    private void txtPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPWActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPWActionPerformed

    private void btnAnnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnAnnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login_Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login_Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnn;
    private javax.swing.JButton btnCon;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JLabel label_login;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JPasswordField txtPW;
    // End of variables declaration//GEN-END:variables

         
          
    
}
